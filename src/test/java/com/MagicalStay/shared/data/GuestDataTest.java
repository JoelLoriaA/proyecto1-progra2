package com.MagicalStay.shared.data;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

import com.MagicalStay.shared.domain.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class GuestDataTest {

    private File guestFile;
    private GuestData guestData;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setup() throws IOException {
        guestFile = File.createTempFile("guests", ".dat");
        guestData = new GuestData(guestFile.getAbsolutePath());
    }

    @AfterEach
    public void cleanup() throws IOException {
        if (guestData != null) guestData.close();
    }

    @Test
    public void testCreateGuest() throws IOException {

        Guest guest = new Guest("Juan", "P√©rez Garc√≠a", 12345678, 88887777,
                "juan.perez@email.com", "Calle 123, Ciudad", "Costa Rica");

        String createResult = guestData.create(guest);
        System.out.println("üë§ Resultado creaci√≥n hu√©sped: " + createResult);
        assertNotNull(createResult);
        assertTrue(createResult.contains("\"success\":true"), " Error al crear hu√©sped");

        String readResult = guestData.retrieveById(12345678);
        System.out.println("üìÑ Resultado lectura hu√©sped: " + readResult);
        assertNotNull(readResult);
        assertTrue(readResult.contains("Juan"), " No contiene nombre");
        assertTrue(readResult.contains("P√©rez Garc√≠a"), " No contiene apellido");
        assertTrue(readResult.contains("juan.perez@email.com"), " No contiene email");
        assertTrue(readResult.contains("Costa Rica"), " No contiene nacionalidad");
    }

    @Test
    public void testCreateDuplicateGuest() throws IOException {

        Guest guest1 = new Guest("Mar√≠a", "Gonz√°lez", 87654321, 99998888,
                "maria@email.com", "Avenida 456", "M√©xico");

        String createResult1 = guestData.create(guest1);
        assertTrue(createResult1.contains("\"success\":true"), " Error al crear primer hu√©sped");

        Guest guest2 = new Guest("Carlos", "L√≥pez", 87654321, 77776666,
                "carlos@email.com", "Boulevard 789", "Guatemala");

        String createResult2 = guestData.create(guest2);
        System.out.println(" Intento crear duplicado: " + createResult2);
        assertTrue(createResult2.contains("\"success\":false"), " Deber√≠a fallar al crear duplicado");
        assertTrue(createResult2.contains("already exists"), " Mensaje de error incorrecto");
    }

    @Test
    public void testUpdateGuest() throws IOException {

        Guest originalGuest = new Guest("Ana", "Rodr√≠guez", 11223344, 55554444,
                "ana@email.com", "Calle Original", "Espa√±a");

        String createResult = guestData.create(originalGuest);
        assertTrue(createResult.contains("\"success\":true"), " Error al crear hu√©sped");


        Guest updatedGuest = new Guest("Ana Mar√≠a", "Rodr√≠guez S√°nchez", 11223344, 66665555,
                "ana.maria@newemail.com", "Nueva Direcci√≥n 123", "Espa√±a");

        String updateResult = guestData.update(updatedGuest);
        System.out.println("‚úè Resultado actualizaci√≥n: " + updateResult);
        assertTrue(updateResult.contains("\"success\":true"), " Error al actualizar hu√©sped");


        String readResult = guestData.retrieveById(11223344);
        assertTrue(readResult.contains("Ana Mar√≠a"), " No se actualiz√≥ el nombre");
        assertTrue(readResult.contains("Rodr√≠guez S√°nchez"), " No se actualiz√≥ el apellido");
        assertTrue(readResult.contains("ana.maria@newemail.com"), " No se actualiz√≥ el email");
    }

    @Test
    public void testDeleteGuest() throws IOException {

        Guest guest = new Guest("Pedro", "Mart√≠nez", 99887766, 33332222,
                "pedro@email.com", "Plaza Central", "Nicaragua");

        String createResult = guestData.create(guest);
        assertTrue(createResult.contains("\"success\":true"), "Error al crear hu√©sped");


        String readBeforeDelete = guestData.retrieveById(99887766);
        assertTrue(readBeforeDelete.contains("Pedro"), " Hu√©sped no encontrado antes de eliminar");


        String deleteResult = guestData.delete(99887766);
        System.out.println(" Resultado eliminaci√≥n: " + deleteResult);
        assertTrue(deleteResult.contains("\"success\":true"), " Error al eliminar hu√©sped");


        String readAfterDelete = guestData.retrieveById(99887766);
        System.out.println(" Despu√©s de eliminar: " + readAfterDelete);
        assertTrue(readAfterDelete.contains("\"success\":false"), " Hu√©sped todav√≠a existe");
    }

    @Test
    public void testRetrieveAllGuests() throws IOException {

        List<Guest> guestsToCreate = List.of(
                new Guest("Luis", "Hern√°ndez", 12121212, 11111111, "luis@email.com", "Direcci√≥n 1", "Honduras"),
                new Guest("Carmen", "Jim√©nez", 34343434, 22222222, "carmen@email.com", "Direcci√≥n 2", "El Salvador"),
                new Guest("Roberto", "Vargas", 56565656, 33333333, "roberto@email.com", "Direcci√≥n 3", "Panam√°")
        );


        for (Guest guest : guestsToCreate) {
            String result = guestData.create(guest);
            assertTrue(result.contains("\"success\":true"), " Error al crear hu√©sped: " + guest.getName());
        }


        String retrieveAllResult = guestData.retrieveAll();
        System.out.println(" Resultado retrieveAll: " + retrieveAllResult);

        JsonResponse response = objectMapper.readValue(retrieveAllResult, JsonResponse.class);
        assertTrue(response.isSuccess(), "Error al recuperar hu√©spedes");

        List<Guest> retrievedGuests = objectMapper.convertValue(
                response.getData(),
                new TypeReference<List<Guest>>() {}
        );

        assertEquals(3, retrievedGuests.size(), " N√∫mero incorrecto de hu√©spedes");
        assertTrue(retrievedGuests.stream().anyMatch(g -> g.getName().equals("Luis")), " Falta Luis");
        assertTrue(retrievedGuests.stream().anyMatch(g -> g.getName().equals("Carmen")), " Falta Carmen");
        assertTrue(retrievedGuests.stream().anyMatch(g -> g.getName().equals("Roberto")), " Falta Roberto");
    }

    @Test
    public void testSearchByName() throws IOException {

        Guest guest1 = new Guest("Jos√© Carlos", "Mendoza", 77777777, 44444444,
                "jose@email.com", "Calle Jos√©", "Costa Rica");
        Guest guest2 = new Guest("Mar√≠a Jos√©", "Fern√°ndez", 88888888, 55555555,
                "maria.jose@email.com", "Avenida Mar√≠a", "Costa Rica");
        Guest guest3 = new Guest("Antonio", "Garc√≠a", 99999999, 66666666,
                "antonio@email.com", "Boulevard Antonio", "Costa Rica");

        guestData.create(guest1);
        guestData.create(guest2);
        guestData.create(guest3);


        String searchResult = guestData.retrieveByName("Jos√©");
        System.out.println("B√∫squeda por nombre 'Jos√©': " + searchResult);

        JsonResponse response = objectMapper.readValue(searchResult, JsonResponse.class);
        assertTrue(response.isSuccess(), " Error en b√∫squeda por nombre");

        List<Guest> foundGuests = objectMapper.convertValue(
                response.getData(),
                new TypeReference<List<Guest>>() {}
        );

        assertEquals(2, foundGuests.size(), " Deber√≠a encontrar 2 hu√©spedes con 'Jos√©'");
        assertTrue(foundGuests.stream().anyMatch(g -> g.getName().contains("Jos√© Carlos")), " Falta Jos√© Carlos");
        assertTrue(foundGuests.stream().anyMatch(g -> g.getName().contains("Mar√≠a Jos√©")), " Falta Mar√≠a Jos√©");
    }

    @Test
    public void testSearchByEmail() throws IOException {

        Guest guest1 = new Guest("Laura", "Ram√≠rez", 11111111, 77777777,
                "laura@gmail.com", "Direcci√≥n Laura", "Costa Rica");
        Guest guest2 = new Guest("Diego", "Morales", 22222222, 88888888,
                "diego@gmail.com", "Direcci√≥n Diego", "Costa Rica");
        Guest guest3 = new Guest("Sofia", "Castro", 33333333, 99999999,
                "sofia@yahoo.com", "Direcci√≥n Sofia", "Costa Rica");

        guestData.create(guest1);
        guestData.create(guest2);
        guestData.create(guest3);


        String searchResult = guestData.retrieveByEmail("gmail");
        System.out.println("üìß B√∫squeda por email 'gmail': " + searchResult);

        JsonResponse response = objectMapper.readValue(searchResult, JsonResponse.class);
        assertTrue(response.isSuccess(), " Error en b√∫squeda por email");

        List<Guest> foundGuests = objectMapper.convertValue(
                response.getData(),
                new TypeReference<List<Guest>>() {}
        );

        assertEquals(2, foundGuests.size(), " Deber√≠a encontrar 2 hu√©spedes con 'gmail'");
        assertTrue(foundGuests.stream().anyMatch(g -> g.getEmail().contains("laura@gmail.com")), " Falta Laura");
        assertTrue(foundGuests.stream().anyMatch(g -> g.getEmail().contains("diego@gmail.com")), " Falta Diego");
    }

    @Test
    public void testFieldLengthValidation() throws IOException {

        String longName = "A".repeat(50);
        String longLastName = "B".repeat(50);
        String longEmail = "C".repeat(60) + "@email.com";
        String longAddress = "D".repeat(150);
        String longNationality = "E".repeat(50);

        Guest invalidGuest = new Guest(longName, longLastName, 12345678, 88887777,
                longEmail, longAddress, longNationality);

        String createResult = guestData.create(invalidGuest);
        System.out.println(" Intento crear con campos largos: " + createResult);
        assertTrue(createResult.contains("\"success\":false"), " Deber√≠a fallar con campos largos");
        assertTrue(createResult.contains("exceed maximum length"), " Mensaje de error incorrecto");
    }

    @Test
    public void testDeleteNonExistentGuest() throws IOException {

        String deleteResult = guestData.delete(99999999);
        System.out.println(" Intento eliminar inexistente: " + deleteResult);
        assertTrue(deleteResult.contains("\"success\":false"), " Deber√≠a fallar al eliminar inexistente");
        assertTrue(deleteResult.contains("not found"), " Mensaje de error incorrecto");
    }
}
